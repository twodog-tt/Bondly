basePath: /
definitions:
  dto.BindWalletRequest:
    properties:
      user_id:
        example: 1
        type: integer
      wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
    required:
    - user_id
    - wallet_address
    type: object
  dto.BindWalletResponse:
    properties:
      message:
        example: 钱包绑定成功
        type: string
      nickname:
        example: John Doe
        type: string
      user_id:
        example: 1
        type: integer
      wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
    type: object
  dto.CodeStatusData:
    properties:
      code_exists:
        example: true
        type: boolean
      code_ttl_seconds:
        example: 300
        type: integer
      email:
        example: user@example.com
        type: string
      lock_ttl_seconds:
        example: 0
        type: integer
      locked:
        example: false
        type: boolean
    type: object
  dto.CreateUserRequest:
    properties:
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      bio:
        example: Hello, I'm a blockchain enthusiast
        type: string
      custody_wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
      email:
        example: user@example.com
        type: string
      encrypted_private_key:
        example: encrypted_private_key_data
        type: string
      nickname:
        example: John Doe
        type: string
      reputation_score:
        example: 0
        type: integer
      role:
        example: user
        type: string
      wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
    required:
    - nickname
    type: object
  dto.CustodyWalletResponse:
    properties:
      custody_wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
      nickname:
        example: John Doe
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  dto.GenerateWalletRequest:
    properties:
      user_id:
        example: 1
        type: integer
    required:
    - user_id
    type: object
  dto.GenerateWalletResponse:
    properties:
      custody_wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
      message:
        example: 托管钱包生成成功
        type: string
      nickname:
        example: John Doe
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      image_url:
        example: https://example.com/avatar.jpg
        type: string
      nickname:
        example: John Doe
        type: string
    required:
    - email
    - nickname
    type: object
  dto.LoginResponse:
    properties:
      email:
        example: user@example.com
        type: string
      expires_in:
        example: 24小时
        type: string
      is_new_user:
        example: false
        type: boolean
      nickname:
        example: John Doe
        type: string
      role:
        example: user
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  dto.SendCodeData:
    properties:
      email:
        example: user@example.com
        type: string
      expires_in:
        example: 10分钟
        type: string
    type: object
  dto.SendCodeRequest:
    properties:
      email:
        example: user@example.com
        format: email
        type: string
    required:
    - email
    type: object
  dto.UpdateUserRequest:
    properties:
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      bio:
        example: Hello, I'm a blockchain enthusiast
        type: string
      custody_wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
      encrypted_private_key:
        example: encrypted_private_key_data
        type: string
      nickname:
        example: John Doe
        type: string
      reputation_score:
        example: 100
        type: integer
      role:
        example: user
        type: string
      wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
    type: object
  dto.UploadImageData:
    properties:
      url:
        example: http://localhost:8080/uploads/2023/12/01/abc123.jpg
        type: string
    type: object
  dto.CreateContentRequest:
    properties:
      title:
        example: My Article Title
        type: string
      content:
        example: This is the article content...
        type: string
      type:
        example: article
        type: string
      status:
        example: draft
        type: string
      cover_image_url:
        example: https://example.com/cover.jpg
        type: string
    required:
    - title
    - content
    type: object
  dto.UpdateContentRequest:
    properties:
      title:
        example: Updated Article Title
        type: string
      content:
        example: Updated article content...
        type: string
      type:
        example: article
        type: string
      status:
        example: published
        type: string
      cover_image_url:
        example: https://example.com/new-cover.jpg
        type: string
    type: object
  dto.UserResponse:
    properties:
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      bio:
        example: Hello, I'm a blockchain enthusiast
        type: string
      created_at:
        example: "2023-12-01T10:00:00Z"
        type: string
      custody_wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
      email:
        example: user@example.com
        type: string
      encrypted_private_key:
        example: encrypted_private_key_data
        type: string
      id:
        example: 1
        type: integer
      last_login_at:
        example: "2023-12-01T10:00:00Z"
        type: string
      nickname:
        example: John Doe
        type: string
      reputation_score:
        example: 100
        type: integer
      role:
        example: user
        type: string
      updated_at:
        example: "2023-12-01T10:00:00Z"
        type: string
      wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
    type: object
  dto.VerifyCodeData:
    properties:
      email:
        example: user@example.com
        type: string
      isValid:
        example: true
        type: boolean
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  dto.VerifyCodeRequest:
    properties:
      code:
        example: "123456"
        maxLength: 6
        minLength: 6
        type: string
      email:
        example: user@example.com
        format: email
        type: string
    required:
    - code
    - email
    type: object
  dto.WalletInfoResponse:
    properties:
      custody_wallet_address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
      has_wallet:
        example: true
        type: boolean
      nickname:
        example: John Doe
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  dto.WalletLoginRequest:
    properties:
      wallet_address:
        example: 0x1234567890123456789012345678901234567890
        type: string
    required:
    - wallet_address
    type: object
  dto.WalletLoginResponse:
    properties:
      email:
        example: user@example.com
        type: string
      expires_in:
        example: 24小时
        type: string
      is_new_user:
        example: false
        type: boolean
      nickname:
        example: John Doe
        type: string
      role:
        example: user
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  handlers.BlockchainStatusData:
    properties:
      message:
        example: Blockchain connection status
        type: string
      network:
        example: ethereum
        type: string
      status:
        example: connected
        type: string
    type: object
  handlers.ContentDetailData:
    properties:
      id:
        example: "1"
        type: string
      message:
        example: Content detail
        type: string
    type: object
  handlers.ContentListData:
    properties:
      content:
        items: {}
        type: array
      message:
        example: Content list
        type: string
    type: object
  handlers.ContractInfoData:
    properties:
      address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
      message:
        example: Contract information
        type: string
      status:
        example: active
        type: string
    type: object
  handlers.CreateContentData:
    properties:
      id:
        example: "1"
        type: string
      message:
        example: Content created successfully
        type: string
    type: object
  handlers.CreateProposalData:
    properties:
      id:
        example: "1"
        type: string
      message:
        example: Proposal created successfully
        type: string
    type: object
  handlers.HealthData:
    properties:
      message:
        example: Bondly API is running
        type: string
      status:
        example: ok
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
  handlers.ProposalDetailData:
    properties:
      id:
        example: "1"
        type: string
      message:
        example: Proposal detail
        type: string
    type: object
  handlers.ProposalListData:
    properties:
      message:
        example: Proposals list
        type: string
      proposals:
        items: {}
        type: array
    type: object
  handlers.StakeData:
    properties:
      message:
        example: Tokens staked successfully
        type: string
    type: object
  handlers.StatsData:
    properties:
      active_stakers:
        example: 3500
        type: integer
      total_content:
        example: 25600
        type: integer
      total_proposals:
        example: 125
        type: integer
      total_users:
        example: 10000
        type: integer
      total_value_locked:
        example: "1250000.50"
        type: string
    type: object
  handlers.UserBalanceData:
    properties:
      address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
      balance:
        example: "1000.50"
        type: string
      message:
        example: User balance
        type: string
    type: object
  handlers.UserInfoData:
    properties:
      address:
        example: 0x1234567890abcdef1234567890abcdef12345678
        type: string
      message:
        example: User information
        type: string
    type: object
  handlers.VoteData:
    properties:
      message:
        example: Vote submitted successfully
        type: string
    type: object
  models.Comment:
    properties:
      author:
        $ref: '#/definitions/models.User'
      author_id:
        type: integer
      child_comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      likes:
        type: integer
      parent_comment:
        $ref: '#/definitions/models.Comment'
      parent_comment_id:
        type: integer
      post:
        $ref: '#/definitions/models.Content'
      post_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.Content:
    properties:
      author:
        $ref: '#/definitions/models.User'
      author_id:
        type: integer
      content:
        type: string
      cover_image_url:
        description: 封面图片URL
        type: string
      created_at:
        type: string
      dislikes:
        type: integer
      id:
        type: integer
      likes:
        type: integer
      status:
        description: draft, published, archived
        type: string
      title:
        type: string
      type:
        description: article, post, comment
        type: string
      updated_at:
        type: string
      views:
        type: integer
    type: object
  models.Proposal:
    properties:
      created_at:
        type: string
      description:
        type: string
      end_time:
        type: string
      id:
        type: integer
      proposer:
        $ref: '#/definitions/models.User'
      proposer_id:
        type: integer
      start_time:
        type: string
      status:
        description: active, passed, rejected, executed
        type: string
      title:
        type: string
      updated_at:
        type: string
      votes_against:
        type: integer
      votes_for:
        type: integer
    type: object
  models.Transaction:
    properties:
      block_number:
        type: integer
      created_at:
        type: string
      from_address:
        type: string
      gas_price:
        type: string
      gas_used:
        type: integer
      hash:
        type: string
      id:
        type: integer
      status:
        description: pending, confirmed, failed
        type: string
      to_address:
        type: string
      updated_at:
        type: string
      value:
        type: string
    type: object
  models.User:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      created_at:
        type: string
      custody_wallet_address:
        type: string
      email:
        type: string
      encrypted_private_key:
        type: string
      id:
        type: integer
      last_login_at:
        type: string
      nickname:
        type: string
      reputation_score:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      wallet_address:
        type: string
    type: object
  models.WalletBinding:
    properties:
      created_at:
        type: string
      id:
        type: integer
      network:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      wallet_address:
        type: string
    type: object
  response.Response-any:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-array_dto_GenerateWalletResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/dto.GenerateWalletResponse'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-array_dto_UserResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_BindWalletResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.BindWalletResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_CodeStatusData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.CodeStatusData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_CustodyWalletResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.CustodyWalletResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_GenerateWalletResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.GenerateWalletResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_LoginResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.LoginResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_SendCodeData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.SendCodeData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_UploadImageData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.UploadImageData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_UserResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.UserResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_VerifyCodeData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.VerifyCodeData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_WalletInfoResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.WalletInfoResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-dto_WalletLoginResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/dto.WalletLoginResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_BlockchainStatusData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.BlockchainStatusData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_ContentDetailData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.ContentDetailData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_ContentListData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.ContentListData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_ContractInfoData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.ContractInfoData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_CreateContentData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.CreateContentData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_CreateProposalData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.CreateProposalData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_HealthData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.HealthData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_ProposalDetailData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.ProposalDetailData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_ProposalListData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.ProposalListData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_StakeData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.StakeData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_StatsData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.StatsData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_UserBalanceData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.UserBalanceData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_UserInfoData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.UserInfoData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Response-handlers_VoteData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.VoteData'
      message:
        type: string
      success:
        type: boolean
    type: object
  response.ResponseAny:
    properties:
      code:
        example: 1000
        type: integer
      data: {}
      message:
        example: 操作成功
        type: string
      success:
        example: true
        type: boolean
    type: object
  response.ResponseComment:
    properties:
      code:
        example: 1000
        type: integer
      data: {}
      message:
        example: 操作成功
        type: string
      success:
        example: true
        type: boolean
    type: object
  response.ResponseContent:
    properties:
      code:
        example: 1000
        type: integer
      data: {}
      message:
        example: 操作成功
        type: string
      success:
        example: true
        type: boolean
    type: object
  response.ResponseProposal:
    properties:
      code:
        example: 1000
        type: integer
      data: {}
      message:
        example: 操作成功
        type: string
      success:
        example: true
        type: boolean
    type: object
  response.ResponseTransaction:
    properties:
      code:
        example: 1000
        type: integer
      data: {}
      message:
        example: 操作成功
        type: string
      success:
        example: true
        type: boolean
    type: object
  response.ResponseUserFollow:
    properties:
      code:
        example: 1000
        type: integer
      data: {}
      message:
        example: 操作成功
        type: string
      success:
        example: true
        type: boolean
    type: object
  response.ResponseWalletBinding:
    properties:
      code:
        example: 1000
        type: integer
      data: {}
      message:
        example: 操作成功
        type: string
      success:
        example: true
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@bondly.com
    name: Bondly API Support
    url: https://bondly.com/support
  description: 这是Bondly项目的API文档，提供用户认证、区块链交互、内容管理和治理功能。
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://bondly.com/terms
  title: Bondly API
  version: "1.0"
paths:
  /api/v1/auth/code-status:
    get:
      consumes:
      - application/json
      description: 查询指定邮箱的验证码是否存在、剩余有效时间以及是否被限流。用于前端显示重发倒计时等功能。
      parameters:
      - description: 邮箱地址
        example: user@example.com
        format: email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 邮箱参数缺失或格式错误
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 查询验证码状态
      tags:
      - 认证管理
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: 用户登录，如果用户不存在则自动创建新用户
      parameters:
      - description: 登录请求体
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 登录失败
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 用户登录
      tags:
      - 认证管理
  /api/v1/auth/send-code:
    post:
      consumes:
      - application/json
      description: 向指定邮箱发送6位数字验证码，用于用户身份验证。验证码有效期为10分钟，60秒内最多只能发送一次。
      parameters:
      - description: 发送验证码请求体
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SendCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 请求参数错误或邮箱格式无效
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 发送邮箱验证码
      tags:
      - 认证管理
  /api/v1/auth/verify-code:
    post:
      consumes:
      - application/json
      description: 验证用户提交的6位数字验证码是否正确。验证成功后，验证码自动失效。
      parameters:
      - description: 验证码验证请求体
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 请求参数错误或验证码不正确
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 验证邮箱验证码
      tags:
      - 认证管理
  /api/v1/auth/wallet-login:
    post:
      consumes:
      - application/json
      description: 用户仅通过钱包登陆，如果用户不存在则自动创建新用户
      parameters:
      - description: 钱包登录请求体
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.WalletLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 钱包地址格式错误或登录失败
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 用户仅通过钱包登陆
      tags:
      - 认证管理
  /api/v1/blockchain/contract/{address}:
    get:
      consumes:
      - application/json
      description: 根据合约地址获取智能合约的详细信息，包括合约名称、符号、精度、总供应量等基本信息
      parameters:
      - description: 合约地址
        example: 0x1234567890abcdef1234567890abcdef12345678
        in: path
        maxLength: 42
        minLength: 42
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 无效的合约地址格式
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 获取智能合约信息
      tags:
      - 区块链
  /api/v1/blockchain/stake:
    post:
      consumes:
      - application/json
      description: 质押指定数量的BONDLY代币到智能合约，获得治理权重和奖励。质押期间代币被锁定。
      parameters:
      - description: 质押请求体
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: 请求参数错误或余额不足
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 质押BONDLY代币
      tags:
      - 区块链
  /api/v1/blockchain/status:
    get:
      consumes:
      - application/json
      description: 查询当前区块链网络的连接状态、网络信息、最新区块号和Gas价格等实时信息
      produces:
      - application/json
      responses:
        "200":
          description: 区块链状态信息
          schema:
            $ref: '#/definitions/response.Response-handlers_BlockchainStatusData'
      summary: 获取区块链连接状态
      tags:
      - 区块链
  /api/v1/comments:
    get:
      consumes:
      - application/json
      description: 分页获取评论列表
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseComment'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取评论列表
      tags:
      - 评论管理
    post:
      consumes:
      - application/json
      description: 创建新的评论
      parameters:
      - description: 评论信息
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.ResponseComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 创建评论
      tags:
      - 评论管理
  /api/v1/comments/{id}:
    delete:
      consumes:
      - application/json
      description: 删除指定的评论
      parameters:
      - description: 评论ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 删除评论
      tags:
      - 评论管理
    get:
      consumes:
      - application/json
      description: 根据ID获取评论详情
      parameters:
      - description: 评论ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseComment'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取评论详情
      tags:
      - 评论管理
    put:
      consumes:
      - application/json
      description: 更新指定评论的信息
      parameters:
      - description: 评论ID
        in: path
        name: id
        required: true
        type: integer
      - description: 更新的评论信息
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 更新评论
      tags:
      - 评论管理
  /api/v1/content:
    get:
      consumes:
      - application/json
      description: 获取平台上的内容列表，支持分页、分类筛选和关键词搜索。返回内容摘要、作者信息、点赞数等基本信息。
      parameters:
      - description: 页码，默认为1
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 每页数量，默认为20
        example: 20
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: 内容分类
        enum:
        - article
        - post
        - comment
        example: article
        in: query
        name: category
        type: string
      - description: 搜索关键词
        example: 区块链
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 内容列表
          schema:
            $ref: '#/definitions/response.Response-handlers_ContentListData'
      summary: 获取内容列表
      tags:
      - 内容管理
    post:
      consumes:
      - application/json
      description: 创建新的内容（文章、帖子等），需要提供标题、内容和类型。内容创建后默认为草稿状态。
      parameters:
      - description: 创建内容请求体
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 创建新内容
      tags:
      - 内容管理
  /api/v1/content/{id}:
    delete:
      consumes:
      - application/json
      description: 删除指定的内容
      parameters:
      - description: 内容ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 删除内容
      tags:
      - 内容管理
    get:
      consumes:
      - application/json
      description: 根据内容ID获取详细的内容信息，包括完整内容、作者信息、点赞/踩数、评论统计等。访问时会自动增加浏览次数。
      parameters:
      - description: 内容ID
        example: "1"
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 内容不存在或已被删除
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 获取内容详情
      tags:
      - 内容管理
    put:
      consumes:
      - application/json
      description: 更新指定内容的信息
      parameters:
      - description: 内容ID
        in: path
        name: id
        required: true
        type: integer
      - description: 更新的内容信息
        in: body
        name: content
        required: true
        schema:
          $ref: '#/definitions/models.Content'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseContent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 更新内容
      tags:
      - 内容管理
  /api/v1/governance/proposals:
    get:
      consumes:
      - application/json
      description: 获取平台治理提案列表，包括提案状态、投票情况、截止时间等信息。支持按状态筛选和分页查询。
      parameters:
      - description: 提案状态
        enum:
        - active
        - pending
        - completed
        - rejected
        - executed
        example: active
        in: query
        name: status
        type: string
      - description: 页码，默认为1
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 每页数量，默认为20
        example: 20
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 提案列表
          schema:
            $ref: '#/definitions/response.Response-handlers_ProposalListData'
      summary: 获取治理提案列表
      tags:
      - 治理管理
    post:
      consumes:
      - application/json
      description: 创建新的治理提案，需要提供标题、描述和投票截止时间。提案创建后进入待审核状态。
      parameters:
      - description: 创建提案请求体
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: 请求参数错误或截止时间无效
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 创建治理提案
      tags:
      - 治理管理
  /api/v1/governance/proposals/{id}:
    get:
      consumes:
      - application/json
      description: 根据提案ID获取详细的提案信息，包括完整描述、投票记录、讨论评论、提案者信息等。
      parameters:
      - description: 提案ID
        example: "1"
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 提案不存在或已被删除
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 获取提案详情
      tags:
      - 治理管理
  /api/v1/governance/proposals/vote:
    post:
      consumes:
      - application/json
      description: 用户对指定提案投票（赞成或反对）。投票权重根据用户持有的代币数量计算。
      parameters:
      - description: 投票请求体
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: 请求参数错误或提案已结束
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 对提案进行投票
      tags:
      - 治理管理
  /api/v1/proposals:
    get:
      consumes:
      - application/json
      description: 分页获取提案列表
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseProposal'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取提案列表
      tags:
      - 提案管理
    post:
      consumes:
      - application/json
      description: 创建新的提案
      parameters:
      - description: 提案信息
        in: body
        name: proposal
        required: true
        schema:
          $ref: '#/definitions/models.Proposal'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.ResponseProposal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 创建提案
      tags:
      - 提案管理
  /api/v1/proposals/{id}:
    delete:
      consumes:
      - application/json
      description: 删除指定的提案
      parameters:
      - description: 提案ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 删除提案
      tags:
      - 提案管理
    get:
      consumes:
      - application/json
      description: 根据ID获取提案详情
      parameters:
      - description: 提案ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseProposal'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取提案详情
      tags:
      - 提案管理
    put:
      consumes:
      - application/json
      description: 更新指定提案的信息
      parameters:
      - description: 提案ID
        in: path
        name: id
        required: true
        type: integer
      - description: 更新的提案信息
        in: body
        name: proposal
        required: true
        schema:
          $ref: '#/definitions/models.Proposal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseProposal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 更新提案
      tags:
      - 提案管理
  /api/v1/stats:
    get:
      consumes:
      - application/json
      description: 获取平台的各项统计数据，包括用户数量、内容数量、提案数量、质押总额等信息。
      produces:
      - application/json
      responses:
        "200":
          description: 统计信息
          schema:
            $ref: '#/definitions/response.Response-handlers_StatsData'
      summary: 获取平台统计信息
      tags:
      - 系统监控
  /api/v1/transactions:
    get:
      consumes:
      - application/json
      description: 分页获取交易列表
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseTransaction'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取交易列表
      tags:
      - 交易管理
    post:
      consumes:
      - application/json
      description: 创建新的交易记录
      parameters:
      - description: 交易信息
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.ResponseTransaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 创建交易
      tags:
      - 交易管理
  /api/v1/transactions/{id}:
    delete:
      consumes:
      - application/json
      description: 删除指定的交易
      parameters:
      - description: 交易ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 删除交易
      tags:
      - 交易管理
    get:
      consumes:
      - application/json
      description: 根据ID获取交易详情
      parameters:
      - description: 交易ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseTransaction'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取交易详情
      tags:
      - transaction
    put:
      consumes:
      - application/json
      description: 更新指定交易的信息
      parameters:
      - description: 交易ID
        in: path
        name: id
        required: true
        type: integer
      - description: 更新的交易信息
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseTransaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 更新交易
      tags:
      - 交易管理
  /api/v1/transactions/hash/{hash}:
    get:
      consumes:
      - application/json
      description: 根据交易哈希获取交易详情
      parameters:
      - description: 交易哈希
        in: path
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseTransaction'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 根据哈希获取交易
      tags:
      - 交易管理
  /api/v1/transactions/stats:
    get:
      consumes:
      - application/json
      description: 获取交易相关的统计数据
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取交易统计
      tags:
      - 交易管理
  /api/v1/upload/image:
    post:
      consumes:
      - multipart/form-data
      description: 上传图片文件，支持jpg、jpeg、png、gif、webp格式，文件大小限制5MB
      parameters:
      - description: 图片文件
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 文件格式错误或上传失败
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 上传图片文件
      tags:
      - 文件上传
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: 分页获取用户列表
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取用户列表成功
          schema:
            $ref: '#/definitions/response.Response-array_dto_UserResponse'
      summary: 获取用户列表
      tags:
      - 用户管理
    post:
      consumes:
      - application/json
      description: 创建新用户，支持Web2和Web3用户信息
      parameters:
      - description: 创建用户请求体
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 创建失败
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 创建新用户
      tags:
      - 用户管理
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: 根据用户ID获取详细的用户信息
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 用户不存在
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 根据ID获取用户信息
      tags:
      - 用户管理
    post:
      consumes:
      - application/json
      description: 更新指定用户的个人信息（部分更新）
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 更新用户请求体
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 用户不存在或更新失败
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 更新用户信息
      tags:
      - 用户管理
  /api/v1/users/{id}/custody-wallet:
    get:
      consumes:
      - application/json
      description: 获取指定用户的托管钱包地址和加密私钥
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 用户不存在
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 获取用户托管钱包信息
      tags:
      - 用户管理
  /api/v1/users/{user_id}/follow:
    post:
      consumes:
      - application/json
      description: 关注指定用户
      parameters:
      - description: 要关注的用户ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 关注用户
      tags:
      - 粉丝管理
  /api/v1/users/{user_id}/followers:
    get:
      consumes:
      - application/json
      description: 分页获取指定用户的粉丝列表
      parameters:
      - description: 用户ID
        in: path
        name: user_id
        required: true
        type: integer
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseUserFollow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取用户的粉丝列表
      tags:
      - 粉丝管理
  /api/v1/users/{user_id}/following:
    get:
      consumes:
      - application/json
      description: 分页获取指定用户关注的人列表
      parameters:
      - description: 用户ID
        in: path
        name: user_id
        required: true
        type: integer
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseUserFollow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取用户关注的人列表
      tags:
      - 粉丝管理
  /api/v1/users/{user_id}/unfollow:
    delete:
      consumes:
      - application/json
      description: 取消关注指定用户
      parameters:
      - description: 要取消关注的用户ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 取消关注用户
      tags:
      - 粉丝管理
  /api/v1/users/email/{email}:
    get:
      consumes:
      - application/json
      description: 根据邮箱地址获取用户信息，用于Web2登录
      parameters:
      - description: 邮箱地址
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 用户不存在
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 根据邮箱获取用户信息
      tags:
      - 用户管理
  /api/v1/users/top:
    get:
      consumes:
      - application/json
      description: 获取声誉积分最高的用户列表
      parameters:
      - default: 10
        description: 获取数量
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            $ref: '#/definitions/response.Response-array_dto_UserResponse'
      summary: 获取声誉积分最高的用户
      tags:
      - 用户管理
  /api/v1/users/wallet/{address}:
    get:
      consumes:
      - application/json
      description: 根据钱包地址获取用户信息，用于Web3登录
      parameters:
      - description: 钱包地址
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 用户不存在
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 根据钱包地址获取用户信息
      tags:
      - 用户管理
  /api/v1/wallet-bindings:
    get:
      consumes:
      - application/json
      description: 分页获取钱包绑定列表
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseWalletBinding'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取钱包绑定列表
      tags:
      - 钱包绑定管理
    post:
      consumes:
      - application/json
      description: 创建新的钱包绑定
      parameters:
      - description: 钱包绑定信息
        in: body
        name: binding
        required: true
        schema:
          $ref: '#/definitions/models.WalletBinding'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.ResponseWalletBinding'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 创建钱包绑定
      tags:
      - 钱包绑定管理
  /api/v1/wallet-bindings/{id}:
    delete:
      consumes:
      - application/json
      description: 删除指定的钱包绑定
      parameters:
      - description: 钱包绑定ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 删除钱包绑定
      tags:
      - 钱包绑定管理
    get:
      consumes:
      - application/json
      description: 根据ID获取钱包绑定详情
      parameters:
      - description: 钱包绑定ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseWalletBinding'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      summary: 获取钱包绑定详情
      tags:
      - 钱包绑定管理
    put:
      consumes:
      - application/json
      description: 更新指定钱包绑定的信息
      parameters:
      - description: 钱包绑定ID
        in: path
        name: id
        required: true
        type: integer
      - description: 更新的钱包绑定信息
        in: body
        name: binding
        required: true
        schema:
          $ref: '#/definitions/models.WalletBinding'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseWalletBinding'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ResponseAny'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ResponseAny'
      security:
      - BearerAuth: []
      summary: 更新钱包绑定
      tags:
      - 钱包绑定管理
  /api/v1/wallets/{user_id}:
    get:
      consumes:
      - application/json
      description: 获取指定用户的托管钱包信息（不返回私钥）
      parameters:
      - description: 用户ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 用户不存在
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 获取用户钱包信息
      tags:
      - 钱包管理
  /api/v1/wallets/batch-generate:
    post:
      consumes:
      - application/json
      description: 为多个用户批量生成托管钱包
      parameters:
      - description: 用户ID列表
        in: body
        name: user_ids
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: 部分用户生成失败
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 批量生成托管钱包
      tags:
      - 钱包管理
  /api/v1/wallets/bind:
    post:
      consumes:
      - application/json
      description: 为指定用户绑定外部钱包地址（如MetaMask等）
      parameters:
      - description: 绑定钱包请求体
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BindWalletRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 用户不存在或钱包已绑定
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 绑定用户钱包地址
      tags:
      - 钱包管理
  /api/v1/wallets/generate:
    post:
      consumes:
      - application/json
      description: 为指定用户生成托管钱包
      parameters:
      - description: 生成钱包请求体
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GenerateWalletRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 用户不存在或已存在托管钱包
          schema:
            $ref: '#/definitions/response.Response-any'
      summary: 生成托管钱包
      tags:
      - 钱包管理
  /health:
    get:
      consumes:
      - application/json
      description: 检查API服务是否正常运行，返回服务状态、版本信息和运行时长。用于负载均衡器和监控系统的健康检查。
      produces:
      - application/json
      responses:
        "200":
          description: 服务正常运行
          schema:
            $ref: '#/definitions/response.Response-handlers_HealthData'
      summary: 健康检查
      tags:
      - 系统监控
  /users/{address}/balance-old:
    get:
      consumes:
      - application/json
      deprecated: true
      description: 根据用户地址获取用户的代币余额（已弃用，请使用 /users/{address}/balance）
      parameters:
      - description: 用户钱包地址
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 用户余额信息
          schema:
            $ref: '#/definitions/response.Response-handlers_UserBalanceData'
      summary: 获取用户余额
      tags:
      - 用户管理
  /users/{address}/info:
    get:
      consumes:
      - application/json
      deprecated: true
      description: 根据用户地址获取用户的基本信息（已弃用，请使用 /users/{address}）
      parameters:
      - description: 用户钱包地址
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 用户信息
          schema:
            $ref: '#/definitions/response.Response-handlers_UserInfoData'
      summary: 获取用户基本信息
      tags:
      - 用户管理
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
